TRIE IMPLEMENTATION :-

class Node{
    public:
    unordered_map<char,Node*>mp;
    bool eow;
    Node(){
        eow=false;
    }
};
class Trie {
public: 
    Node *root;
    Trie() {
        root= new Node();
    }
    
    void insert(string word) {
        Node *temp=root;
        for(auto it:word){
            if(!temp->mp.count(it)){
                temp->mp[it]=new Node();
            }
            temp=temp->mp[it];
        }
        temp->eow=true;
        
    }
    
    bool search(string word) {
        Node *temp=root;
        for(auto it:word){
            if(!temp->mp.count(it))return false;
            temp=temp->mp[it];
        }
        if(temp->eow==true)return true;
        return false;
    }
    
    bool startsWith(string prefix) {
        Node *temp=root;
        for(auto it:prefix){
            if(!temp->mp.count(it))return false;
            temp=temp->mp[it];
        }
        return true;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
